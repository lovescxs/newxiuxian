name: 🐳 Build and Push Docker Image

on:
  # 推送到main分支时触发
  push:
    branches: [ main ]
    paths-ignore:
      - '*.md'
      - 'docs/**'
  
  # 创建标签时触发
  push:
    tags:
      - 'v*'
  
  # 手动触发
  workflow_dispatch:
    inputs:
      version:
        description: '版本号 (例如: 1.0.0)'
        required: false
        default: 'latest'

env:
  REGISTRY: docker.io
  IMAGE_NAME: cultivation-game

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    
    steps:
    - name: 🔍 Checkout repository
      uses: actions/checkout@v4
    
    - name: 🐳 Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: 🔑 Log in to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}
    
    - name: 📋 Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ secrets.DOCKERHUB_USERNAME }}/${{ env.IMAGE_NAME }}
        tags: |
          # 设置latest标签用于main分支
          type=ref,event=branch
          type=ref,event=pr
          # 从git标签提取版本号
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=semver,pattern={{major}}
          # 为main分支设置latest标签
          type=raw,value=latest,enable={{is_default_branch}}
          # 手动触发时使用输入的版本号
          type=raw,value=${{ github.event.inputs.version }},enable=${{ github.event_name == 'workflow_dispatch' }}
    
    - name: 🔨 Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        platforms: linux/amd64,linux/arm64
        cache-from: type=gha
        cache-to: type=gha,mode=max
    
    - name: 🧪 Test Docker image
      run: |
        echo "🧪 测试Docker镜像..."
        
        # 启动测试容器
        docker run -d --name test-cultivation \
          -p 8080:80 \
          -e DB_HOST=localhost \
          -e DB_NAME=test_db \
          -e DB_USER=test_user \
          -e DB_PASS=test_pass \
          ${{ secrets.DOCKERHUB_USERNAME }}/${{ env.IMAGE_NAME }}:latest
        
        # 等待容器启动
        sleep 10
        
        # 测试HTTP响应
        if curl -f http://localhost:8080; then
          echo "✅ HTTP服务正常"
        else
          echo "❌ HTTP服务异常"
          docker logs test-cultivation
          exit 1
        fi
        
        # 清理测试容器
        docker stop test-cultivation
        docker rm test-cultivation
        
        echo "✅ 镜像测试通过"
    
    - name: 📊 Image scan
      uses: anchore/scan-action@v3
      id: scan
      with:
        image: ${{ secrets.DOCKERHUB_USERNAME }}/${{ env.IMAGE_NAME }}:latest
        fail-build: false
        severity-cutoff: high
    
    - name: 📋 Upload scan results
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: ${{ steps.scan.outputs.sarif }}
    
    - name: 🎉 Success notification
      if: success()
      run: |
        echo "🎉 Docker镜像构建和推送成功！"
        echo ""
        echo "📦 镜像信息:"
        echo "   仓库: ${{ secrets.DOCKERHUB_USERNAME }}/${{ env.IMAGE_NAME }}"
        echo "   标签: ${{ steps.meta.outputs.tags }}"
        echo ""
        echo "🚀 使用方法:"
        echo "   docker pull ${{ secrets.DOCKERHUB_USERNAME }}/${{ env.IMAGE_NAME }}:latest"
        echo "   docker run -d -p 8080:80 ${{ secrets.DOCKERHUB_USERNAME }}/${{ env.IMAGE_NAME }}:latest"
