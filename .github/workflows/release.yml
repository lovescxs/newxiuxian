name: 🚀 Release

on:
  push:
    tags:
      - 'v*'

env:
  REGISTRY: docker.io
  IMAGE_NAME: cultivation-game

jobs:
  create-release:
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
      version: ${{ steps.get_version.outputs.version }}
    
    steps:
    - name: 🔍 Checkout
      uses: actions/checkout@v4
    
    - name: 📋 Get version
      id: get_version
      run: echo "version=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
    
    - name: 📦 Create release package
      run: |
        # 创建发布目录
        mkdir -p release-package
        
        # 复制必要文件
        cp -r api release-package/
        cp *.html *.js *.css release-package/
        cp Dockerfile docker-compose*.yml .env.example .htaccess release-package/
        cp *.sh release-package/
        cp *.md release-package/
        cp init.sql release-package/
        
        # 创建压缩包
        tar -czf cultivation-game-${{ steps.get_version.outputs.version }}.tar.gz release-package/
        zip -r cultivation-game-${{ steps.get_version.outputs.version }}.zip release-package/
    
    - name: 🎉 Create GitHub Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: 🏮 修仙世界 ${{ steps.get_version.outputs.version }}
        body: |
          ## 🏮 修仙世界游戏 ${{ steps.get_version.outputs.version }}
          
          ### ✨ 新功能
          - 自动修炼系统（离线挂机）
          - 任务系统（日常/周常任务）
          - Docker容器化部署
          - 一键安装脚本
          
          ### 🚀 快速安装
          
          **方法一：一键安装**
          ```bash
          curl -fsSL https://raw.githubusercontent.com/${{ github.repository }}/main/install.sh | bash
          ```
          
          **方法二：Docker Hub**
          ```bash
          docker run -d -p 8080:80 ${{ secrets.DOCKERHUB_USERNAME }}/${{ env.IMAGE_NAME }}:${{ steps.get_version.outputs.version }}
          ```
          
          **方法三：docker-compose**
          ```bash
          curl -fsSL https://raw.githubusercontent.com/${{ github.repository }}/main/docker-compose.hub.yml -o docker-compose.yml
          docker-compose up -d
          ```
          
          ### 📦 下载
          - [cultivation-game-${{ steps.get_version.outputs.version }}.tar.gz](https://github.com/${{ github.repository }}/releases/download/${{ steps.get_version.outputs.version }}/cultivation-game-${{ steps.get_version.outputs.version }}.tar.gz)
          - [cultivation-game-${{ steps.get_version.outputs.version }}.zip](https://github.com/${{ github.repository }}/releases/download/${{ steps.get_version.outputs.version }}/cultivation-game-${{ steps.get_version.outputs.version }}.zip)
          
          ### 🎮 在线体验
          - Docker Hub: https://hub.docker.com/r/${{ secrets.DOCKERHUB_USERNAME }}/${{ env.IMAGE_NAME }}
          
          ### 📖 文档
          - [部署指南](https://github.com/${{ github.repository }}/blob/main/DEPLOY.md)
          - [Docker Hub指南](https://github.com/${{ github.repository }}/blob/main/DOCKER-HUB-GUIDE.md)
        draft: false
        prerelease: false
    
    - name: 📤 Upload tar.gz
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./cultivation-game-${{ steps.get_version.outputs.version }}.tar.gz
        asset_name: cultivation-game-${{ steps.get_version.outputs.version }}.tar.gz
        asset_content_type: application/gzip
    
    - name: 📤 Upload zip
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./cultivation-game-${{ steps.get_version.outputs.version }}.zip
        asset_name: cultivation-game-${{ steps.get_version.outputs.version }}.zip
        asset_content_type: application/zip

  docker-build:
    runs-on: ubuntu-latest
    needs: create-release
    
    steps:
    - name: 🔍 Checkout
      uses: actions/checkout@v4
    
    - name: 🐳 Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: 🔑 Log in to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}
    
    - name: 📋 Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ secrets.DOCKERHUB_USERNAME }}/${{ env.IMAGE_NAME }}
        tags: |
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=semver,pattern={{major}}
          type=raw,value=latest
    
    - name: 🔨 Build and push
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        platforms: linux/amd64,linux/arm64
        cache-from: type=gha
        cache-to: type=gha,mode=max
    
    - name: 🎉 Success
      run: |
        echo "🎉 Release ${{ needs.create-release.outputs.version }} 发布成功！"
        echo ""
        echo "🐳 Docker镜像: ${{ secrets.DOCKERHUB_USERNAME }}/${{ env.IMAGE_NAME }}:${{ needs.create-release.outputs.version }}"
        echo "📦 GitHub Release: https://github.com/${{ github.repository }}/releases/tag/${{ needs.create-release.outputs.version }}"
